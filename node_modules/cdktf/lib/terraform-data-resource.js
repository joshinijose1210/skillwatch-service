"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataResource = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const validate_terraform_version_1 = require("./validations/validate-terraform-version");
const terraform_resource_1 = require("./terraform-resource");
const importable_resource_1 = require("./importable-resource");
const complex_computed_list_1 = require("./complex-computed-list");
const runtime_1 = require("./runtime");
/**
 * The DataResource implements the standard resource lifecycle, but does not directly take any other actions. You can use the DataResource resource without requiring or configuring a provider.
 *
 * The DataResource resource is useful for storing values which need to follow a manage resource lifecycle, and for triggering provisioners when there is no other logical managed resource in which to place them.
 *
 * It requires Terraform 1.4 or later.
 *
 * It is also possible to generate these bindings by adding "terraform.io/builtin/terraform" to the "terraformProviders" key in your cdktf.json file and running "cdktf get".
 *
 * https://developer.hashicorp.com/terraform/language/resources/terraform-data
 */
class DataResource extends terraform_resource_1.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
     * Generates CDKTF code for importing a Data resource upon running "cdktf plan <stack-name>"
     * @param scope The scope in which to define this construct
     * @param importToId The construct id used in the generated config for the Data to import
     * @param importFromId The id of the existing Data that should be imported. Refer to the {@link https://terraform.io/providers/builtin/terraform/latest/docs/resources/data#import import section} in the documentation of this resource for the id to use
     * @param provider? Optional instance of the provider where the Data to import is found
     */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new importable_resource_1.ImportableResource(scope, importToId, {
            terraformResourceType: "terraform_data",
            importId: importFromId,
            provider,
        });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new TerraformData Resource.
     *
     * The DataResource resource is useful for storing values which need to follow a manage resource lifecycle, and for triggering provisioners when there is no other logical managed resource in which to place them.
     *
     * @param scope The scope in which to define this construct
     * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
     * @param options DataConfig = {}
     */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: "terraform_data",
            terraformGeneratorMetadata: {
                providerName: "terraform",
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach,
        });
        // output - computed: true, optional: false, required: false
        this._output = new complex_computed_list_1.AnyMap(this, "output");
        this._input = config.input;
        this._triggersReplace = config.triggersReplace;
        this.node.addValidation(new validate_terraform_version_1.ValidateTerraformVersion(">=1.4", `The built-in Terraform data resource is only supported for Terraform >=1.4. Please upgrade your Terraform version.`));
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute("id");
    }
    get input() {
        return this.getAnyMapAttribute("input");
    }
    /**
     * (Optional) A value which will be stored in the instance state, and reflected in the output attribute after apply.
     * https://developer.hashicorp.com/terraform/language/resources/terraform-data#input
     */
    set input(value) {
        this._input = value;
    }
    resetInput() {
        this._input = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputInput() {
        return this._input;
    }
    get output() {
        return this._output;
    }
    get triggersReplace() {
        return this.getAnyMapAttribute("triggers_replace");
    }
    /**
     * (Optional) A value which is stored in the instance state, and will force replacement when the value changes.
     * https://developer.hashicorp.com/terraform/language/resources/terraform-data#triggers_replace
     */
    set triggersReplace(value) {
        this._triggersReplace = value;
    }
    resetTriggersReplace() {
        this._triggersReplace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggersReplaceInput() {
        return this._triggersReplace;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            input: (0, runtime_1.hashMapper)(runtime_1.anyToTerraform)(this._input),
            triggers_replace: (0, runtime_1.hashMapper)(runtime_1.anyToTerraform)(this._triggersReplace),
        };
    }
    synthesizeHclAttributes() {
        return {
            input: (0, runtime_1.hashMapperHcl)(runtime_1.anyToHclTerraform)(this._input),
            triggers_replace: (0, runtime_1.hashMapperHcl)(runtime_1.anyToHclTerraform)(this._triggersReplace),
        };
    }
}
exports.DataResource = DataResource;
_a = JSII_RTTI_SYMBOL_1;
DataResource[_a] = { fqn: "cdktf.DataResource", version: "0.21.0" };
// =================
// STATIC PROPERTIES
// =================
DataResource.tfResourceType = "terraform_data";
//# sourceMappingURL=data:application/json;base64,