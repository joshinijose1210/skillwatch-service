"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformStack = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const constructs_1 = require("constructs");
const _tokens_1 = require("./_tokens");
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const terraform_provider_1 = require("./terraform-provider");
const local_backend_1 = require("./backends/local-backend");
const tfExpression_1 = require("./tfExpression");
const terraform_output_1 = require("./terraform-output");
const unique_1 = require("./private/unique");
const synthesizer_1 = require("./synthesize/synthesizer");
const STACK_SYMBOL = Symbol.for("cdktf/TerraformStack");
const validations_1 = require("./validations");
const app_1 = require("./app");
const terraform_backend_1 = require("./terraform-backend");
const terraform_resource_targets_1 = require("./terraform-resource-targets");
const terraform_resource_1 = require("./terraform-resource");
const render_1 = require("./hcl/render");
const errors_1 = require("./errors");
// eslint-disable-next-line jsdoc/require-jsdoc
function throwIfIdIsGlobCharacter(str) {
    ["*", "?", "[", "]", "{", "}", "!"].forEach((char) => {
        if (str.includes(char)) {
            throw (0, errors_1.stackContainsDisallowedChar)(str, char);
        }
    });
}
// eslint-disable-next-line jsdoc/require-jsdoc
function throwIfIdContainsWhitespace(str) {
    if (/\s/.test(str)) {
        throw (0, errors_1.stackIdContainsWhitespace)(str);
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformStack extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.rawOverrides = {};
        this.crossStackOutputs = {};
        this.crossStackDataSources = {};
        this.dependencies = [];
        this.moveTargets = new terraform_resource_targets_1.TerraformResourceTargets();
        throwIfIdIsGlobCharacter(id);
        throwIfIdContainsWhitespace(id);
        this.cdktfVersion = this.node.tryGetContext("cdktfVersion");
        this.synthesizer = new synthesizer_1.StackSynthesizer(this, process.env.CDKTF_CONTINUE_SYNTH_ON_ERROR_ANNOTATIONS !== undefined, process.env.SYNTH_HCL_OUTPUT === "true" ||
            process.env.SYNTH_HCL_OUTPUT === "1");
        Object.defineProperty(this, STACK_SYMBOL, { value: true });
        this.node.addValidation(new validations_1.ValidateProviderPresence(this));
    }
    static isStack(x) {
        return x !== null && typeof x === "object" && STACK_SYMBOL in x;
    }
    static of(construct) {
        return _lookup(construct);
        // eslint-disable-next-line jsdoc/require-jsdoc
        function _lookup(c) {
            if (TerraformStack.isStack(c)) {
                return c;
            }
            const node = c.node;
            if (!node.scope) {
                let hint = "";
                if (construct.node.scope === c && app_1.App.isApp(c)) {
                    // the scope of the originally passed construct equals the construct c
                    // which has no scope (i.e. has no parent construct) and c is an App
                    // and our construct is a Backend
                    hint = `. You seem to have passed your root App as scope to a construct. Pass a stack (inheriting from TerraformStack) as scope to your construct instead.`;
                }
                throw (0, errors_1.noStackForConstruct)(construct.node.path, hint);
            }
            return _lookup(node.scope);
        }
    }
    findAll(predicate) {
        const items = [];
        const visit = async (node) => {
            if (predicate(node)) {
                items.push(node);
            }
            for (const child of node.node.children) {
                visit(child);
            }
        };
        visit(this);
        return items;
    }
    prepareStack() {
        // Ensure we have a backend configured
        this.ensureBackendExists();
        // A preparing resolve run might add new resources to the stack, e.g. for cross stack references.
        terraformElements(this).forEach((e) => (0, _tokens_1.resolve)(this, e.toTerraform(), true));
    }
    addOverride(path, value) {
        const parts = path.split(".");
        let curr = this.rawOverrides;
        while (parts.length > 1) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const key = parts.shift();
            // if we can't recurse further or the previous value is not an
            // object overwrite it with an object.
            const isObject = curr[key] != null &&
                typeof curr[key] === "object" &&
                !Array.isArray(curr[key]);
            if (!isObject) {
                curr[key] = {};
            }
            curr = curr[key];
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const lastKey = parts.shift();
        curr[lastKey] = value;
    }
    getLogicalId(tfElement) {
        // wrap the allocation for future renaming support
        return this.allocateLogicalId(tfElement);
    }
    /**
     * Returns the naming scheme used to allocate logical IDs. By default, uses
     * the `HashedAddressingScheme` but this method can be overridden to customize
     * this behavior.
     *
     * @param tfElement The element for which the logical ID is allocated.
     */
    allocateLogicalId(tfElement) {
        const node = terraform_element_1.TerraformElement.isTerraformElement(tfElement)
            ? tfElement.node
            : tfElement;
        const stack = terraform_element_1.TerraformElement.isTerraformElement(tfElement)
            ? tfElement.cdktfStack
            : this;
        const stackIndex = node.scopes.indexOf(stack);
        const components = node.scopes.slice(stackIndex + 1).map((c) => c.node.id);
        return components.length > 0 ? (0, unique_1.makeUniqueId)(components) : "";
    }
    allProviders() {
        return this.findAll(terraform_provider_1.TerraformProvider.isTerraformProvider);
    }
    ensureBackendExists() {
        const backends = this.findAll(terraform_backend_1.TerraformBackend.isBackend);
        return backends[0] || new local_backend_1.LocalBackend(this, {});
    }
    toHclTerraform() {
        const metadata = {
            version: this.cdktfVersion,
            stackName: this.node.id,
            backend: "local", // overwritten by backend implementations if used
            cloud: undefined, // overwritten by cloud and remote backend implementations
            ...(Object.keys(this.rawOverrides).length > 0
                ? { overrides: { stack: Object.keys(this.rawOverrides) } }
                : {}),
        };
        const elements = terraformElements(this);
        const metadatas = elements.map((e) => (0, _tokens_1.resolve)(this, e.toMetadata()));
        for (const meta of metadatas) {
            (0, util_1.deepMerge)(metadata, meta);
        }
        const outputs = elements.reduce((carry, item) => {
            if (!terraform_output_1.TerraformOutput.isTerraformOutput(item)) {
                return carry;
            }
            (0, util_1.deepMerge)(carry, item.node.path.split("/").reduceRight((innerCarry, part) => {
                if (Object.keys(innerCarry).length === 0) {
                    return { [part]: item.friendlyUniqueId };
                }
                return { [part]: innerCarry };
            }, {}));
            return carry;
        }, {});
        const tf = {};
        const fragments = elements.map((e) => (0, _tokens_1.resolve)(this, e.toHclTerraform()));
        const locals = {};
        const tfMeta = {
            "//": {
                metadata,
                outputs,
            },
        };
        const hclFragments = fragments
            .map((frag) => {
            let res = "";
            if (frag.resource) {
                const { hcl, metadata } = (0, render_1.renderResource)(frag.resource);
                (0, util_1.deepMerge)(tfMeta, metadata);
                res = [res, hcl].join("\n");
            }
            if (frag.data) {
                const { hcl, metadata } = (0, render_1.renderDatasource)(frag.data);
                (0, util_1.deepMerge)(tfMeta, metadata);
                res = [res, hcl].join("\n");
            }
            if (frag.provider) {
                (0, util_1.deepMerge)(tf, frag);
                res = [res, (0, render_1.renderProvider)(frag.provider)].join("\n\n");
            }
            if (frag.terraform) {
                (0, util_1.deepMerge)(tf, frag);
            }
            if (frag.module) {
                const { hcl, metadata } = (0, render_1.renderModule)(frag.module);
                (0, util_1.deepMerge)(tfMeta, metadata);
                res = [res, hcl].join("\n");
            }
            if (frag.output) {
                res = [res, (0, render_1.renderOutput)(frag.output)].join("\n\n");
            }
            if (frag.moved) {
                res = [res, (0, render_1.renderMoved)(frag.moved)].join("\n\n");
            }
            if (frag.import) {
                res = [res, (0, render_1.renderImport)(frag.import)].join("\n\n");
            }
            if (frag.locals) {
                (0, util_1.deepMerge)(locals, frag);
            }
            if (frag.variable) {
                res = [res, (0, render_1.renderVariable)(frag.variable)].join("\n\n");
            }
            return res;
        })
            .filter((frag) => frag !== undefined);
        (0, util_1.deepMerge)(tf, this.rawOverrides);
        const terraformBlock = tf?.terraform;
        let terraformBlockHcl = "";
        if (terraformBlock) {
            terraformBlockHcl = (0, render_1.renderTerraform)(terraformBlock);
            (0, util_1.deepMerge)(tfMeta, { terraform: (0, render_1.cleanForMetadata)(terraformBlock) });
        }
        let localsHcl = "";
        if (locals) {
            localsHcl = (0, render_1.renderLocals)(locals.locals);
            if (localsHcl) {
                // Hacky way to add a newline between the terraform block and the locals block
                localsHcl = "\n\n" + localsHcl;
            }
        }
        return {
            hcl: (0, _tokens_1.resolve)(this, [terraformBlockHcl, localsHcl, ...hclFragments].join("")),
            metadata: (0, _tokens_1.resolve)(this, tfMeta),
        };
    }
    toTerraform() {
        const tf = {};
        const metadata = {
            version: this.cdktfVersion,
            stackName: this.node.id,
            backend: "local", // overwritten by backend implementations if used
            cloud: undefined, // overwritten by cloud and remote backend implementations
            ...(Object.keys(this.rawOverrides).length > 0
                ? { overrides: { stack: Object.keys(this.rawOverrides) } }
                : {}),
        };
        const elements = terraformElements(this);
        const metadatas = elements.map((e) => (0, _tokens_1.resolve)(this, e.toMetadata()));
        for (const meta of metadatas) {
            (0, util_1.deepMerge)(metadata, meta);
        }
        const outputs = elements.reduce((carry, item) => {
            if (!terraform_output_1.TerraformOutput.isTerraformOutput(item)) {
                return carry;
            }
            (0, util_1.deepMerge)(carry, item.node.path.split("/").reduceRight((innerCarry, part) => {
                if (Object.keys(innerCarry).length === 0) {
                    return { [part]: item.friendlyUniqueId };
                }
                return { [part]: innerCarry };
            }, {}));
            return carry;
        }, {});
        tf["//"] = { metadata, outputs };
        const fragments = elements.map((e) => (0, _tokens_1.resolve)(this, e.toTerraform()));
        for (const fragment of fragments) {
            (0, util_1.deepMerge)(tf, fragment);
        }
        (0, util_1.deepMerge)(tf, this.rawOverrides);
        return (0, _tokens_1.resolve)(this, tf);
    }
    registerOutgoingCrossStackReference(identifier) {
        if (this.crossStackOutputs[identifier]) {
            return this.crossStackOutputs[identifier];
        }
        const output = new terraform_output_1.TerraformOutput(this, `cross-stack-output-${identifier}`, {
            value: (0, tfExpression_1.ref)(identifier, this),
            sensitive: true,
        });
        this.crossStackOutputs[identifier] = output;
        return output;
    }
    registerIncomingCrossStackReference(fromStack) {
        if (this.crossStackDataSources[String(fromStack)]) {
            return this.crossStackDataSources[String(fromStack)];
        }
        const originBackend = fromStack.ensureBackendExists();
        const originPath = fromStack.node.path;
        const remoteState = originBackend.getRemoteStateDataSource(this, `cross-stack-reference-input-${originPath}`, originPath);
        this.crossStackDataSources[originPath] = remoteState;
        return remoteState;
    }
    // Check here for loops in the dependency graph
    dependsOn(stack) {
        return (this.dependencies.includes(stack) ||
            this.dependencies.some((d) => d.dependsOn(stack)));
    }
    addDependency(dependency) {
        if (dependency.dependsOn(this)) {
            throw (0, errors_1.stackHasCircularDependency)(this, dependency);
        }
        if (this.dependencies.includes(dependency)) {
            return;
        }
        this.dependencies.push(dependency);
    }
    /**
     * Run all validations on the stack.
     */
    runAllValidations() {
        const errors = this.node
            .findAll()
            .map((node) => node.node.validate().map((error) => ({ message: error, source: node })))
            .reduce((prev, curr) => [...prev, ...curr], []);
        if (errors.length > 0) {
            const errorList = errors
                .map((e) => `[${e.source.node.path}] ${e.message}`)
                .join("\n  ");
            throw (0, errors_1.stackValidationFailure)(errorList);
        }
    }
    hasResourceMove() {
        return terraformElements(this).some((e) => {
            if (terraform_resource_1.TerraformResource.isTerraformResource(e) && e.hasResourceMove()) {
                return true;
            }
            return false;
        });
    }
}
exports.TerraformStack = TerraformStack;
_a = JSII_RTTI_SYMBOL_1;
TerraformStack[_a] = { fqn: "cdktf.TerraformStack", version: "0.21.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
function terraformElements(node, into = []) {
    if (terraform_element_1.TerraformElement.isTerraformElement(node)) {
        into.push(node);
    }
    for (const child of node.node.children) {
        // Don't recurse into a substack
        if (TerraformStack.isStack(child)) {
            continue;
        }
        terraformElements(child, into);
    }
    return into;
}
//# sourceMappingURL=data:application/json;base64,