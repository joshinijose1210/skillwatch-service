"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformElement = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const assert_1 = require("assert");
const constructs_1 = require("constructs");
const tokens_1 = require("./tokens");
const terraform_stack_1 = require("./terraform-stack");
const tfExpression_1 = require("./tfExpression");
const errors_1 = require("./errors");
const TERRAFORM_ELEMENT_SYMBOL = Symbol.for("cdktf/TerraformElement");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformElement extends constructs_1.Construct {
    constructor(scope, id, elementType) {
        super(scope, id);
        this.rawOverrides = {};
        Object.defineProperty(this, TERRAFORM_ELEMENT_SYMBOL, { value: true });
        this._elementType = elementType;
        if (tokens_1.Token.isUnresolved(id)) {
            throw (0, errors_1.unresolvedTokenInConstructId)(id);
        }
        this.node.addMetadata("stacktrace", "trace");
    }
    get cdktfStack() {
        return terraform_stack_1.TerraformStack.of(this);
    }
    static isTerraformElement(x) {
        return x !== null && typeof x === "object" && TERRAFORM_ELEMENT_SYMBOL in x;
    }
    toTerraform() {
        return {};
    }
    toHclTerraform() {
        return {};
    }
    toMetadata() {
        return {};
    }
    get fqn() {
        if (!this._fqnToken) {
            (0, assert_1.ok)(!!this._elementType, "Element type not set");
            this._fqnToken = tokens_1.Token.asString((0, tfExpression_1.ref)(`${this._elementType}.${this.friendlyUniqueId}`, this.cdktfStack));
        }
        return this._fqnToken;
    }
    get friendlyUniqueId() {
        if (!this._friendlyUniqueId) {
            if (this._logicalIdOverride) {
                this._friendlyUniqueId = this._logicalIdOverride;
            }
            else {
                this._friendlyUniqueId = this.cdktfStack.getLogicalId(this);
            }
        }
        return this._friendlyUniqueId;
    }
    /**
     * Overrides the auto-generated logical ID with a specific ID.
     * @param newLogicalId The new logical ID to use for this stack element.
     */
    overrideLogicalId(newLogicalId) {
        (0, assert_1.ok)(!this._fqnToken, "Logical ID may not be overridden once .fqn has been requested. Make sure to override the id before passing the construct to other constructs.");
        this._logicalIdOverride = newLogicalId;
    }
    /**
     * Resets a previously passed logical Id to use the auto-generated logical id again
     */
    resetOverrideLogicalId() {
        (0, assert_1.ok)(!this._fqnToken, "Logical ID may not be overridden once .fqn has been requested. You can only reset the override before you pass the construct to other constructs.");
        this._logicalIdOverride = undefined;
    }
    addOverride(path, value) {
        const parts = path.split(".");
        let curr = this.rawOverrides;
        while (parts.length > 1) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const key = parts.shift();
            // if we can't recurse further or the previous value is not an
            // object overwrite it with an object.
            const isObject = curr[key] != null &&
                typeof curr[key] === "object" &&
                !Array.isArray(curr[key]);
            if (!isObject) {
                curr[key] = {};
            }
            curr = curr[key];
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const lastKey = parts.shift();
        curr[lastKey] = value;
    }
    get constructNodeMetadata() {
        return {
            metadata: {
                path: this.node.path,
                uniqueId: this.friendlyUniqueId,
                stackTrace: this.node.metadata.find((e) => e.type === "stacktrace")
                    ?.trace,
            },
        };
    }
}
exports.TerraformElement = TerraformElement;
_a = JSII_RTTI_SYMBOL_1;
TerraformElement[_a] = { fqn: "cdktf.TerraformElement", version: "0.21.0" };
//# sourceMappingURL=data:application/json;base64,