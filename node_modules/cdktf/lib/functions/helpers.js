"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.anyValue = anyValue;
exports.mapValue = mapValue;
exports.stringValue = stringValue;
exports.numericValue = numericValue;
exports.listOf = listOf;
exports.variadic = variadic;
exports.asString = asString;
exports.asNumber = asNumber;
exports.asList = asList;
exports.asStringMap = asStringMap;
exports.asBoolean = asBoolean;
exports.asAny = asAny;
exports.terraformFunction = terraformFunction;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const token_1 = require("../tokens/token");
const tfExpression_1 = require("../tfExpression");
const encoding_1 = require("../tokens/private/encoding");
const errors_1 = require("../errors");
/**
 * Determines if given str has unescaped double quotes
 * @param str String to test
 * @returns Boolean
 */
function hasUnescapedDoubleQuotes(str) {
    return /(^|[^\\])([\\]{2})*"/.test(str);
}
// Validators
// eslint-disable-next-line jsdoc/require-jsdoc
function anyValue(value) {
    return { value };
}
// eslint-disable-next-line jsdoc/require-jsdoc
function mapValue(value) {
    return { value };
}
// eslint-disable-next-line jsdoc/require-jsdoc
function stringValue(value) {
    if (typeof value !== "string" && !token_1.Tokenization.isResolvable(value)) {
        throw (0, errors_1.valueIsInvalidStringOrToken)(value);
    }
    if (typeof value === "string" && hasUnescapedDoubleQuotes(value)) {
        throw (0, errors_1.valueContainsUnescapedQuotes)(value);
    }
    return { value };
}
// eslint-disable-next-line jsdoc/require-jsdoc
function numericValue(value) {
    if (typeof value !== "number" && !token_1.Tokenization.isResolvable(value)) {
        throw (0, errors_1.valueIsInvalidNumberOrToken)(value);
    }
    return { value };
}
// eslint-disable-next-line jsdoc/require-jsdoc
function listOf(type) {
    return (value) => {
        if (token_1.Tokenization.isResolvable(value)) {
            return { value };
        }
        if (!Array.isArray(value)) {
            //   throw new Error(`${value} is not a valid list`);
            return { value };
        }
        return {
            value: value
                .filter((item) => item !== undefined && item !== null)
                .map((item, i) => {
                if (token_1.Tokenization.isResolvable(item)) {
                    return item;
                }
                if (encoding_1.TokenString.forListToken(item).test()) {
                    return item;
                }
                if ((0, encoding_1.extractTokenDouble)(item, true) !== undefined) {
                    return item;
                }
                if (encoding_1.TokenString.forMapToken(item).test()) {
                    return item;
                }
                if (typeof item === "string") {
                    const tokenList = token_1.Tokenization.reverseString(item);
                    const numberOfTokens = tokenList.tokens.length + tokenList.intrinsic.length;
                    if (numberOfTokens === 1 && tokenList.literals.length === 0) {
                        return item;
                    }
                }
                try {
                    type(item);
                    return typeof item === "string" ? `"${item}"` : item;
                }
                catch (error) {
                    throw (0, errors_1.listElementIsOfWrongType)(value, i, error);
                }
            }),
        };
    };
}
// eslint-disable-next-line jsdoc/require-jsdoc
function variadic(type) {
    return (value) => {
        // we use the list validator and set variadic to true in order to have it expanded in the args passed to the TF function
        return { value: listOf(type)(value).value, variadic: true };
    };
}
// Tokenization
// eslint-disable-next-line jsdoc/require-jsdoc
function asString(value) {
    return token_1.Token.asString(value);
}
// eslint-disable-next-line jsdoc/require-jsdoc
function asNumber(value) {
    return token_1.Token.asNumber(value);
}
// eslint-disable-next-line jsdoc/require-jsdoc
function asList(value) {
    return token_1.Token.asList(value);
}
// eslint-disable-next-line jsdoc/require-jsdoc
function asStringMap(value) {
    return token_1.Token.asStringMap(value);
}
// eslint-disable-next-line jsdoc/require-jsdoc
function asBoolean(value) {
    return value; // Booleans can not be represented as a token
}
// eslint-disable-next-line jsdoc/require-jsdoc
function asAny(value) {
    // Ordinarily casting to any can cause issues, but
    // in this case it makes using functions a bit easier in TS
    // and doesn't really harm other languages.
    // Jsii has issues when returning the value directly,
    // so wrap as a string.
    return asString(value);
}
// eslint-disable-next-line jsdoc/require-jsdoc
function terraformFunction(name, argValidators) {
    return function (...args) {
        if (args.length !== argValidators.length) {
            throw (0, errors_1.functionReceivedWrongNumberOfArgs)(name, argValidators.length, args.length);
        }
        return (0, tfExpression_1.call)(name, 
        // We use flatMap now, since listOf() wraps everything in an extra array but variadic() does not
        // This enables us to have variadic pass multiple args into the call() from a single array
        args.reduce((carry, arg, i) => {
            try {
                const val = argValidators[i](arg);
                if (val.variadic)
                    return [...carry, ...val.value];
                else
                    return [...carry, val.value];
            }
            catch (error) {
                throw (0, errors_1.functionArgumentValidationFailure)(i, name, error);
            }
        }, []));
    };
}
//# sourceMappingURL=data:application/json;base64,