"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Testing = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
/* eslint-disable @typescript-eslint/no-require-imports */
const fs = require("fs");
const path = require("path");
const os = require("os");
const stringify = require("json-stable-stringify");
const lib_1 = require("../../lib");
const manifest_1 = require("../manifest");
const features_1 = require("../features");
const jest_1 = require("./adapters/jest");
const synthesizer_1 = require("../synthesize/synthesizer");
const matchers_1 = require("./matchers");
const DefaultTestingAppConfig = {
    stackTraces: false,
    stubVersion: true,
    enableFutureFlags: true,
    fakeCdktfJsonPath: false,
};
/**
 * Testing utilities for cdktf applications.
 */
class Testing {
    /**
     * Returns an app for testing with the following properties:
     * - Output directory is a temp dir.
     */
    static app(options = {}) {
        const appConfig = { ...DefaultTestingAppConfig, ...options };
        if (!appConfig.outdir) {
            appConfig.outdir = fs.mkdtempSync(path.join(os.tmpdir(), "cdktf.outdir."));
        }
        const app = new lib_1.App({
            outdir: appConfig.outdir,
            stackTraces: appConfig.stackTraces,
            context: options.context,
        });
        if (appConfig.stubVersion) {
            this.stubVersion(app);
        }
        if (appConfig.enableFutureFlags) {
            this.enableFutureFlags(app);
        }
        if (appConfig.fakeCdktfJsonPath) {
            this.fakeCdktfJsonPath(app);
        }
        return app;
    }
    static stubVersion(app) {
        app.node.setContext("cdktfVersion", "stubbed");
        app.manifest.version = "stubbed";
        return app;
    }
    static fakeCdktfJsonPath(app) {
        app.node.setContext("cdktfJsonPath", `${process.cwd()}/cdktf.json`);
        app.node.setContext("cdktfRelativeModules", ["./"]);
        return app;
    }
    static enableFutureFlags(app) {
        const node = app.node;
        Object.entries(features_1.FUTURE_FLAGS).forEach(([key, value]) => node.setContext(key, value));
        return app;
    }
    static synthScope(fn) {
        const stack = new lib_1.TerraformStack(Testing.app(), "stack");
        fn(stack);
        return Testing.synth(stack);
    }
    /**
     * Returns the Terraform synthesized JSON.
     */
    static synth(stack, runValidations = false) {
        (0, synthesizer_1.invokeAspects)(stack);
        if (runValidations) {
            stack.runAllValidations();
        }
        const tfConfig = stack.toTerraform();
        // eslint-disable-next-line jsdoc/require-jsdoc
        function removeMetadata(item) {
            if (item !== null && typeof item === "object") {
                if (Array.isArray(item)) {
                    return item.map(removeMetadata);
                }
                const cleanedItem = Object.entries(item)
                    // order alphabetically
                    .sort(([a], [b]) => a.localeCompare(b))
                    .reduce((acc, [key, value]) => ({ ...acc, [key]: removeMetadata(value) }), {});
                // Remove metadata
                delete cleanedItem["//"];
                return cleanedItem;
            }
            return item;
        }
        const cleaned = removeMetadata(tfConfig);
        return stringify(cleaned, { space: 2 });
    }
    /**
     * Returns the Terraform synthesized JSON.
     */
    static synthHcl(stack, runValidations = false, returnMetadata = false) {
        (0, synthesizer_1.invokeAspects)(stack);
        if (runValidations) {
            stack.runAllValidations();
        }
        const config = stack.toHclTerraform();
        if (returnMetadata)
            return config.metadata;
        return config.hcl;
    }
    static fullSynth(stack) {
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), "cdktf.outdir."));
        const manifest = new manifest_1.Manifest("stubbed", outdir, false);
        stack.synthesizer.synthesize({
            outdir,
            manifest,
        });
        manifest.writeToFile();
        return outdir;
    }
    static renderConstructTree(construct) {
        return render(construct, 0, false);
        // eslint-disable-next-line jsdoc/require-jsdoc
        function render(construct, level, isLast) {
            let prefix = "";
            if (level > 0) {
                const spaces = " ".repeat((level - 1) * 4);
                const symbol = isLast ? "└" : "├";
                prefix = `${spaces}${symbol}── `;
            }
            const name = lib_1.App.isApp(construct)
                ? "App"
                : `${construct.node.id} (${construct.constructor.name})`;
            return `${prefix}${name}\n${construct.node.children
                .map((child, idx, arr) => {
                const isLast = idx === arr.length - 1;
                return render(child, level + 1, isLast);
            })
                .join("")}`;
        }
    }
    static toHaveDataSourceWithProperties(received, resourceType, properties = {}) {
        return (0, matchers_1.getToHaveDataSourceWithProperties)()(received, { tfResourceType: resourceType }, properties).pass;
    }
    static toHaveDataSource(received, resourceType) {
        return (0, matchers_1.getToHaveDataSourceWithProperties)()(received, { tfResourceType: resourceType }, {}).pass;
    }
    static toHaveResourceWithProperties(received, resourceType, properties = {}) {
        return (0, matchers_1.getToHaveResourceWithProperties)()(received, { tfResourceType: resourceType }, properties).pass;
    }
    static toHaveResource(received, resourceType) {
        return (0, matchers_1.getToHaveResourceWithProperties)()(received, { tfResourceType: resourceType }, {}).pass;
    }
    static toHaveProviderWithProperties(received, resourceType, properties = {}) {
        return (0, matchers_1.getToHaveProviderWithProperties)()(received, { tfResourceType: resourceType }, properties).pass;
    }
    static toHaveProvider(received, resourceType) {
        return (0, matchers_1.getToHaveProviderWithProperties)()(received, { tfResourceType: resourceType }, {}).pass;
    }
    static toBeValidTerraform(received) {
        return (0, matchers_1.toBeValidTerraform)(received).pass;
    }
    static setupJest() {
        (0, jest_1.setupJest)();
    }
}
exports.Testing = Testing;
_a = JSII_RTTI_SYMBOL_1;
Testing[_a] = { fqn: "cdktf.Testing", version: "0.21.0" };
//# sourceMappingURL=data:application/json;base64,