"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupJest = setupJest;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const errors_1 = require("../../errors");
const matchers_1 = require("../matchers");
const matchers_2 = require("../matchers");
// Jest supports asymetric matchers (https://github.com/facebook/jest/blob/main/packages/expect/src/asymmetricMatchers.ts)
// These matchers are great in expressing partial equality in a deeply nested way
// As we want to support more than one testing framework we can not use them everywhere
function jestPassEvaluation(items, assertedProperties) {
    if (Object.entries(assertedProperties).length === 0) {
        return items.length > 0;
    }
    else {
        if (global.expect) {
            const expect = global.expect;
            return expect
                .arrayContaining([expect.objectContaining(assertedProperties)])
                .asymmetricMatch(items);
        }
        else {
            throw (0, errors_1.jestNotInstantiated)();
        }
    }
}
function setupJest() {
    if (!("expect" in global)) {
        throw (0, errors_1.expectNotGloballyAccessible)();
    }
    const expect = global.expect;
    expect.extend({
        toHaveResource(received, resourceConstructor) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_2.getToHaveResourceWithProperties)(jestPassEvaluation)(received, resourceConstructor, {}));
        },
        toHaveResourceWithProperties(received, resourceConstructor, properties) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_2.getToHaveResourceWithProperties)(jestPassEvaluation)(received, resourceConstructor, properties));
        },
        toHaveDataSource(received, dataSourceConstructor) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_1.getToHaveDataSourceWithProperties)(jestPassEvaluation)(received, dataSourceConstructor, {}));
        },
        toHaveDataSourceWithProperties(received, dataSourceConstructor, properties) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_1.getToHaveDataSourceWithProperties)(jestPassEvaluation)(received, dataSourceConstructor, properties));
        },
        toHaveProvider(received, providerConstructor) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_2.getToHaveProviderWithProperties)(jestPassEvaluation)(received, providerConstructor, {}));
        },
        toHaveProviderWithProperties(received, providerConstructor, properties) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_2.getToHaveProviderWithProperties)(jestPassEvaluation)(received, providerConstructor, properties));
        },
        toBeValidTerraform(received) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_1.toBeValidTerraform)(received));
        },
        toPlanSuccessfully(received) {
            return (0, matchers_2.returnMatcherToJest)((0, matchers_1.toPlanSuccessfully)(received));
        },
    });
}
//# sourceMappingURL=data:application/json;base64,