"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.CONTEXT_ENV = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const constructs_1 = require("constructs");
const fs = require("fs");
const package_json_1 = require("../package.json");
const annotations_1 = require("./annotations");
const manifest_1 = require("./manifest");
const terraform_stack_1 = require("./terraform-stack");
const errors_1 = require("./errors");
const APP_SYMBOL = Symbol.for("cdktf/App");
exports.CONTEXT_ENV = "CDKTF_CONTEXT_JSON";
/**
 * Represents a cdktf application.
 */
class App extends constructs_1.Construct {
    /**
     * Defines an app
     * @param config configuration
     */
    constructor(config = {}) {
        super(undefined, "");
        Object.defineProperty(this, APP_SYMBOL, { value: true });
        this.outdir = config.outdir ?? process.env.CDKTF_OUTDIR ?? "cdktf.out";
        const envHclOutput = process.env.SYNTH_HCL_OUTPUT;
        let hclOutput = config.hclOutput || false;
        if (envHclOutput !== undefined) {
            hclOutput = envHclOutput === "true";
        }
        this.hclOutput = hclOutput;
        this.targetStackId = process.env.CDKTF_TARGET_STACK_ID;
        this.skipValidation = config.skipValidation || false;
        this.skipBackendValidation = config.skipBackendValidation || false;
        this.loadContext(config.context);
        const node = this.node;
        if (config.stackTraces === false) {
            node.setContext(annotations_1.DISABLE_STACK_TRACE_IN_METADATA, true);
        }
        node.setContext("cdktfVersion", package_json_1.version);
        if (!fs.existsSync(this.outdir)) {
            fs.mkdirSync(this.outdir);
        }
        this.manifest = new manifest_1.Manifest(package_json_1.version, this.outdir, this.hclOutput);
    }
    static isApp(x) {
        return x !== null && typeof x === "object" && APP_SYMBOL in x;
    }
    static of(construct) {
        return _lookup(construct);
        // eslint-disable-next-line jsdoc/require-jsdoc
        function _lookup(c) {
            if (App.isApp(c)) {
                return c;
            }
            const node = c.node;
            if (!node.scope) {
                throw (0, errors_1.noAppFound)(construct.node.path);
            }
            return _lookup(node.scope);
        }
    }
    /**
     * Synthesizes all resources to the output directory
     */
    synth() {
        const session = {
            outdir: this.outdir,
            skipValidation: this.skipValidation,
            manifest: this.manifest,
        };
        const stacks = this.node
            .findAll()
            .filter(terraform_stack_1.TerraformStack.isStack);
        stacks.forEach((stack) => stack.prepareStack());
        stacks.forEach((stack) => stack.synthesizer.synthesize(session));
        if (!this.skipValidation) {
            const validations = this.node.validate();
            if (validations.length) {
                const errorList = validations.join("\n  ");
                throw (0, errors_1.appValidationFailure)(errorList);
            }
        }
        this.manifest.writeToFile();
    }
    /**
     * Creates a reference from one stack to another, invoked on prepareStack since it creates extra resources
     */
    crossStackReference(fromStack, toStack, identifier) {
        toStack.addDependency(fromStack);
        const outputId = fromStack.registerOutgoingCrossStackReference(identifier).friendlyUniqueId;
        const remoteState = toStack.registerIncomingCrossStackReference(fromStack);
        return remoteState.getString(outputId);
    }
    loadContext(defaults = {}) {
        const node = this.node;
        // prime with defaults passed through constructor
        for (const [k, v] of Object.entries(defaults)) {
            node.setContext(k, v);
        }
        // read from environment
        const contextJson = process.env[exports.CONTEXT_ENV];
        const contextFromEnvironment = contextJson ? JSON.parse(contextJson) : {};
        for (const [k, v] of Object.entries(contextFromEnvironment)) {
            node.setContext(k, v);
        }
    }
}
exports.App = App;
_a = JSII_RTTI_SYMBOL_1;
App[_a] = { fqn: "cdktf.App", version: "0.21.0" };
//# sourceMappingURL=data:application/json;base64,