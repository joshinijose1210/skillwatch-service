"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateSwift = exports.SwiftBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
/**
 * @deprecated CDK for Terraform no longer supports the swift backend. Terraform deprecated swift in v1.2.3 and removed it in v1.3.
 */
class SwiftBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "swift");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateSwift(scope, name, this.props);
    }
}
exports.SwiftBackend = SwiftBackend;
_a = JSII_RTTI_SYMBOL_1;
SwiftBackend[_a] = { fqn: "cdktf.SwiftBackend", version: "0.21.0" };
/**
 * @deprecated CDK for Terraform no longer supports the swift backend. Terraform deprecated swift in v1.2.3 and removed it in v1.3.
 */
class DataTerraformRemoteStateSwift extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "swift", config);
    }
}
exports.DataTerraformRemoteStateSwift = DataTerraformRemoteStateSwift;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateSwift[_b] = { fqn: "cdktf.DataTerraformRemoteStateSwift", version: "0.21.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpZnQtYmFja2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN3aWZ0LWJhY2tlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSw0REFBd0Q7QUFDeEQsa0NBQTBDO0FBQzFDLHNFQUdtQztBQUVuQzs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLG9DQUFnQjtJQUNoRCxZQUNFLEtBQWdCLEVBQ0MsS0FBeUI7UUFFMUMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFGaEIsVUFBSyxHQUFMLEtBQUssQ0FBb0I7SUFHNUMsQ0FBQztJQUVTLG9CQUFvQjtRQUM1QixPQUFPLElBQUEsc0JBQWUsRUFBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVTLHVCQUF1QjtRQUMvQixPQUFPLElBQUEsc0JBQWUsRUFBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHdCQUF3QixDQUM3QixLQUFnQixFQUNoQixJQUFZLEVBQ1osVUFBa0I7UUFFbEIsT0FBTyxJQUFJLDZCQUE2QixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7O0FBdEJILG9DQXVCQzs7O0FBRUQ7O0dBRUc7QUFDSCxNQUFhLDZCQUE4QixTQUFRLDZDQUFvQjtJQUNyRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUEyQztRQUUzQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7QUFQSCxzRUFRQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgQ0RLIGZvciBUZXJyYWZvcm0gbm8gbG9uZ2VyIHN1cHBvcnRzIHRoZSBzd2lmdCBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBzd2lmdCBpbiB2MS4yLjMgYW5kIHJlbW92ZWQgaXQgaW4gdjEuMy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN3aWZ0QmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IFN3aWZ0QmFja2VuZENvbmZpZyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIFwiYmFja2VuZFwiLCBcInN3aWZ0XCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplSGNsQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZyxcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlU3dpZnQoc2NvcGUsIG5hbWUsIHRoaXMucHJvcHMpO1xuICB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgQ0RLIGZvciBUZXJyYWZvcm0gbm8gbG9uZ2VyIHN1cHBvcnRzIHRoZSBzd2lmdCBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBzd2lmdCBpbiB2MS4yLjMgYW5kIHJlbW92ZWQgaXQgaW4gdjEuMy5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZVN3aWZ0IGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVTd2lmdENvbmZpZyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcInN3aWZ0XCIsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDREsgZm9yIFRlcnJhZm9ybSBubyBsb25nZXIgc3VwcG9ydHMgdGhlIHN3aWZ0IGJhY2tlbmQuIFRlcnJhZm9ybSBkZXByZWNhdGVkIHN3aWZ0IGluIHYxLjIuMyBhbmQgcmVtb3ZlZCBpdCBpbiB2MS4zLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN3aWZ0QmFja2VuZENvbmZpZyB7XG4gIHJlYWRvbmx5IGF1dGhVcmw/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGNsb3VkPzogc3RyaW5nO1xuICByZWFkb25seSBjb250YWluZXI6IHN0cmluZztcbiAgcmVhZG9ubHkgc3RhdGVOYW1lPzogc3RyaW5nO1xuICByZWFkb25seSB1c2VyTmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgdXNlcklkPzogc3RyaW5nO1xuICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZztcbiAgcmVhZG9ubHkgYXBwbGljYXRpb25DcmVkZW50aWFsSWQ/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFwcGxpY2F0aW9uQ3JlZGVudGlhbE5hbWU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFwcGxpY2F0aW9uQ3JlZGVudGlhbFNlY3JldD86IHN0cmluZztcbiAgcmVhZG9ubHkgdG9rZW4/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHJlZ2lvbk5hbWU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRlbmFudElkPzogc3RyaW5nO1xuICByZWFkb25seSB0ZW5hbnROYW1lPzogc3RyaW5nO1xuICByZWFkb25seSBkb21haW5JZD86IHN0cmluZztcbiAgcmVhZG9ubHkgZG9tYWluTmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgdXNlckRvbWFpbk5hbWU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHVzZXJEb21haW5JZD86IHN0cmluZztcbiAgcmVhZG9ubHkgcHJvamVjdERvbWFpbk5hbWU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb2plY3REb21haW5JZD86IHN0cmluZztcbiAgcmVhZG9ubHkgZGVmYXVsdERvbWFpbj86IHN0cmluZztcbiAgcmVhZG9ubHkgaW5zZWN1cmU/OiBib29sZWFuO1xuICByZWFkb25seSBjYWNlcnRGaWxlPzogc3RyaW5nO1xuICByZWFkb25seSBjZXJ0Pzogc3RyaW5nO1xuICByZWFkb25seSBrZXk/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFyY2hpdmVDb250YWluZXI/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGV4cGlyZUFmdGVyPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIENESyBmb3IgVGVycmFmb3JtIG5vIGxvbmdlciBzdXBwb3J0cyB0aGUgc3dpZnQgYmFja2VuZC4gVGVycmFmb3JtIGRlcHJlY2F0ZWQgc3dpZnQgaW4gdjEuMi4zIGFuZCByZW1vdmVkIGl0IGluIHYxLjMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlU3dpZnRDb25maWdcbiAgZXh0ZW5kcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG4gICAgU3dpZnRCYWNrZW5kQ29uZmlnIHt9XG4iXX0=