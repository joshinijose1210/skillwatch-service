"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateHttp = exports.HttpBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class HttpBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "http");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateHttp(scope, name, this.props);
    }
}
exports.HttpBackend = HttpBackend;
_a = JSII_RTTI_SYMBOL_1;
HttpBackend[_a] = { fqn: "cdktf.HttpBackend", version: "0.21.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateHttp extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "http", config);
    }
}
exports.DataTerraformRemoteStateHttp = DataTerraformRemoteStateHttp;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateHttp[_b] = { fqn: "cdktf.DataTerraformRemoteStateHttp", version: "0.21.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cC1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsNERBQXdEO0FBQ3hELGtDQUEwQztBQUMxQyxzRUFHbUM7QUFFbkMsK0NBQStDO0FBQy9DLE1BQWEsV0FBWSxTQUFRLG9DQUFnQjtJQUMvQyxZQUNFLEtBQWdCLEVBQ0MsS0FBd0I7UUFFekMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFGZixVQUFLLEdBQUwsS0FBSyxDQUFtQjtJQUczQyxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sSUFBQSxzQkFBZSxFQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRVMsdUJBQXVCO1FBQy9CLE9BQU8sSUFBQSxzQkFBZSxFQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksNEJBQTRCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7QUF0Qkgsa0NBdUJDOzs7QUFFRCwrQ0FBK0M7QUFDL0MsTUFBYSw0QkFBNkIsU0FBUSw2Q0FBb0I7SUFDcEUsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsTUFBMEM7UUFFMUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7O0FBUEgsb0VBUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFRlcnJhZm9ybUJhY2tlbmQgfSBmcm9tIFwiLi4vdGVycmFmb3JtLWJhY2tlbmRcIjtcbmltcG9ydCB7IGtleXNUb1NuYWtlQ2FzZSB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQge1xuICBUZXJyYWZvcm1SZW1vdGVTdGF0ZSxcbiAgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxufSBmcm9tIFwiLi4vdGVycmFmb3JtLXJlbW90ZS1zdGF0ZVwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuZXhwb3J0IGNsYXNzIEh0dHBCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogSHR0cEJhY2tlbmRDb25maWcsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJodHRwXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplSGNsQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZyxcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlSHR0cChzY29wZSwgbmFtZSwgdGhpcy5wcm9wcyk7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwIGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwQ29uZmlnLFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIFwiaHR0cFwiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgdXNpbmcgYSBzaW1wbGUgUkVTVCBjbGllbnQuXG4gKlxuICogU3RhdGUgd2lsbCBiZSBmZXRjaGVkIHZpYSBHRVQsIHVwZGF0ZWQgdmlhIFBPU1QsIGFuZCBwdXJnZWQgd2l0aCBERUxFVEUuXG4gKiBUaGUgbWV0aG9kIHVzZWQgZm9yIHVwZGF0aW5nIGlzIGNvbmZpZ3VyYWJsZS5cbiAqXG4gKiBUaGlzIGJhY2tlbmQgb3B0aW9uYWxseSBzdXBwb3J0cyBzdGF0ZSBsb2NraW5nLlxuICogV2hlbiBsb2NraW5nIHN1cHBvcnQgaXMgZW5hYmxlZCBpdCB3aWxsIHVzZSBMT0NLIGFuZCBVTkxPQ0sgcmVxdWVzdHMgcHJvdmlkaW5nIHRoZSBsb2NrIGluZm8gaW4gdGhlIGJvZHkuXG4gKiBUaGUgZW5kcG9pbnQgc2hvdWxkIHJldHVybiBhIDQyMzogTG9ja2VkIG9yIDQwOTogQ29uZmxpY3Qgd2l0aCB0aGUgaG9sZGluZyBsb2NrIGluZm8gd2hlblxuICogaXQncyBhbHJlYWR5IHRha2VuLCAyMDA6IE9LIGZvciBzdWNjZXNzLiBBbnkgb3RoZXIgc3RhdHVzIHdpbGwgYmUgY29uc2lkZXJlZCBhbiBlcnJvci5cbiAqIFRoZSBJRCBvZiB0aGUgaG9sZGluZyBsb2NrIGluZm8gd2lsbCBiZSBhZGRlZCBhcyBhIHF1ZXJ5IHBhcmFtZXRlciB0byBzdGF0ZSB1cGRhdGVzIHJlcXVlc3RzLlxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB0aGlzIGJhY2tlbmQgaW4gdGhlIFRlcnJhZm9ybSBkb2NzOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIuaGFzaGljb3JwLmNvbS90ZXJyYWZvcm0vbGFuZ3VhZ2Uvc2V0dGluZ3MvYmFja2VuZHMvaHR0cFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBCYWNrZW5kQ29uZmlnIHtcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgVGhlIGFkZHJlc3Mgb2YgdGhlIFJFU1QgZW5kcG9pbnRcbiAgICovXG4gIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgSFRUUCBtZXRob2QgdG8gdXNlIHdoZW4gdXBkYXRpbmcgc3RhdGUuIERlZmF1bHRzIHRvIFBPU1QuXG4gICAqL1xuICByZWFkb25seSB1cGRhdGVNZXRob2Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBhZGRyZXNzIG9mIHRoZSBsb2NrIFJFU1QgZW5kcG9pbnQuIERlZmF1bHRzIHRvIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgbG9ja0FkZHJlc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBIVFRQIG1ldGhvZCB0byB1c2Ugd2hlbiBsb2NraW5nLiBEZWZhdWx0cyB0byBMT0NLLlxuICAgKi9cbiAgcmVhZG9ubHkgbG9ja01ldGhvZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIGFkZHJlc3Mgb2YgdGhlIHVubG9jayBSRVNUIGVuZHBvaW50LiBEZWZhdWx0cyB0byBkaXNhYmxlZC5cbiAgICovXG4gIHJlYWRvbmx5IHVubG9ja0FkZHJlc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBIVFRQIG1ldGhvZCB0byB1c2Ugd2hlbiB1bmxvY2tpbmcuIERlZmF1bHRzIHRvIFVOTE9DSy5cbiAgICovXG4gIHJlYWRvbmx5IHVubG9ja01ldGhvZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHVzZXJuYW1lIGZvciBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAqL1xuICByZWFkb25seSB1c2VybmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhc3N3b3JkIGZvciBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAqL1xuICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgV2hldGhlciB0byBza2lwIFRMUyB2ZXJpZmljYXRpb24uIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgcmVhZG9ubHkgc2tpcENlcnRWZXJpZmljYXRpb24/OiBib29sZWFuO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIEhUVFAgcmVxdWVzdCByZXRyaWVzLiBEZWZhdWx0cyB0byAyLlxuICAgKi9cbiAgcmVhZG9ubHkgcmV0cnlNYXg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBtaW5pbXVtIHRpbWUgaW4gc2Vjb25kcyB0byB3YWl0IGJldHdlZW4gSFRUUCByZXF1ZXN0IGF0dGVtcHRzLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgcmVhZG9ubHkgcmV0cnlXYWl0TWluPzogbnVtYmVyO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgbWF4aW11bSB0aW1lIGluIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuIEhUVFAgcmVxdWVzdCBhdHRlbXB0cy4gRGVmYXVsdHMgdG8gMzAuXG4gICAqL1xuICByZWFkb25seSByZXRyeVdhaXRNYXg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgUEVNLWVuY29kZWQgY2VydGlmaWNhdGUgdXNlZCBieSB0aGUgc2VydmVyIHRvIHZlcmlmeSB0aGUgY2xpZW50XG4gICAqIGR1cmluZyBtdXR1YWwgVExTIChtVExTKSBhdXRoZW50aWNhdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGNsaWVudENlcnRpZmljYXRlUGVtPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIFBFTS1lbmNvZGVkIHByaXZhdGUga2V5LCByZXF1aXJlZCBpZiBjbGllbnRfY2VydGlmaWNhdGVfcGVtIGlzIHNwZWNpZmllZC5cbiAgICovXG4gIHJlYWRvbmx5IGNsaWVudFByaXZhdGVLZXlQZW0/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgUEVNLWVuY29kZWQgQ0EgY2VydGlmaWNhdGUgY2hhaW4gdXNlZCBieSB0aGUgY2xpZW50IHRvIHZlcmlmeSBzZXJ2ZXJcbiAgICogY2VydGlmaWNhdGVzIGR1cmluZyBUTFMgYXV0aGVudGljYXRpb24uXG4gICAqL1xuICByZWFkb25seSBjbGllbnRDYUNlcnRpZmljYXRlUGVtPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUh0dHBDb25maWdcbiAgZXh0ZW5kcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG4gICAgSHR0cEJhY2tlbmRDb25maWcge31cbiJdfQ==