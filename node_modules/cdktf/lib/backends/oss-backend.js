"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateOss = exports.OssBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class OssBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "oss");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateOss(scope, name, this.props);
    }
}
exports.OssBackend = OssBackend;
_a = JSII_RTTI_SYMBOL_1;
OssBackend[_a] = { fqn: "cdktf.OssBackend", version: "0.21.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateOss extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "oss", config);
    }
}
exports.DataTerraformRemoteStateOss = DataTerraformRemoteStateOss;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateOss[_b] = { fqn: "cdktf.DataTerraformRemoteStateOss", version: "0.21.0" };
//# sourceMappingURL=data:application/json;base64,