"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformProvider = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const tokens_1 = require("./tokens");
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const TERRAFORM_PROVIDER_SYMBOL = Symbol.for("cdktf/TerraformProvider");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformProvider extends terraform_element_1.TerraformElement {
    constructor(scope, id, config) {
        super(scope, id);
        Object.defineProperty(this, TERRAFORM_PROVIDER_SYMBOL, { value: true });
        this.terraformResourceType = config.terraformResourceType;
        this.terraformGeneratorMetadata = config.terraformGeneratorMetadata;
        this.terraformProviderSource = config.terraformProviderSource;
    }
    static isTerraformProvider(x) {
        return (x !== null && typeof x === "object" && TERRAFORM_PROVIDER_SYMBOL in x);
    }
    get alias() {
        // This is always* being overridden currently
        return undefined;
    }
    set alias(_value) {
        // This is always* being overridden currently
    }
    get fqn() {
        return this.alias !== undefined
            ? tokens_1.Token.asString(`${this.terraformResourceType}.${this.alias}`)
            : tokens_1.Token.asString(`${this.terraformResourceType}`);
    }
    get metaAttributes() {
        return this.alias !== undefined ? { alias: this.alias } : {};
    }
    // jsii can't handle abstract classes?
    synthesizeAttributes() {
        return {};
    }
    synthesizeHclAttributes() {
        return {};
    }
    toHclTerraform() {
        return {
            terraform: {
                required_providers: {
                    [this.terraformResourceType]: {
                        version: this.terraformGeneratorMetadata?.providerVersion ||
                            this.terraformGeneratorMetadata?.providerVersionConstraint, // fallback to previous to ease transition
                        source: this.terraformProviderSource,
                    },
                },
            },
            provider: {
                [this.terraformResourceType]: [
                    (0, util_1.deepMerge)((0, util_1.keysToSnakeCase)((0, util_1.processDynamicAttributesForHcl)(this.synthesizeHclAttributes())), this.rawOverrides, this.metaAttributes),
                ],
            },
        };
    }
    /**
     * Adds this resource to the terraform JSON output.
     */
    toTerraform() {
        return {
            terraform: {
                required_providers: {
                    [this.terraformResourceType]: {
                        version: this.terraformGeneratorMetadata?.providerVersion ||
                            this.terraformGeneratorMetadata?.providerVersionConstraint, // fallback to previous to ease transition
                        source: this.terraformProviderSource,
                    },
                },
            },
            provider: {
                [this.terraformResourceType]: [
                    (0, util_1.deepMerge)((0, util_1.keysToSnakeCase)((0, util_1.processDynamicAttributes)(this.synthesizeAttributes())), this.rawOverrides, this.metaAttributes),
                ],
            },
        };
    }
    toMetadata() {
        if (!Object.keys(this.rawOverrides).length) {
            return {};
        }
        return {
            overrides: {
                [this.terraformResourceType]: Object.keys(this.rawOverrides),
            },
        };
    }
}
exports.TerraformProvider = TerraformProvider;
_a = JSII_RTTI_SYMBOL_1;
TerraformProvider[_a] = { fqn: "cdktf.TerraformProvider", version: "0.21.0" };
//# sourceMappingURL=data:application/json;base64,