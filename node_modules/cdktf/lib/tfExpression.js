"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FOR_EXPRESSION_VALUE = exports.FOR_EXPRESSION_KEY = exports.OperatorExpression = void 0;
exports.rawString = rawString;
exports.ref = ref;
exports.insideTfExpression = insideTfExpression;
exports.propertyAccess = propertyAccess;
exports.conditional = conditional;
exports.call = call;
exports.forExpression = forExpression;
exports.dependable = dependable;
const intrinsic_1 = require("./tokens/private/intrinsic");
const token_1 = require("./tokens/token");
const app_1 = require("./app");
const terraform_stack_1 = require("./terraform-stack");
const constructs_1 = require("constructs");
const TERRAFORM_IDENTIFIER_REGEX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
// eslint-disable-next-line jsdoc/require-jsdoc
class TFExpression extends intrinsic_1.Intrinsic {
    resolveExpressionPart(context, arg) {
        const resolvedArg = context.resolve(arg);
        if (token_1.Tokenization.isResolvable(arg)) {
            return resolvedArg;
        }
        if (Array.isArray(resolvedArg)) {
            return `[${resolvedArg
                .map((_, index) => this.resolveArg(context, arg[index]))
                .join(", ")}]`;
        }
        if (typeof resolvedArg === "object" && resolvedArg !== null) {
            return `{${Object.keys(resolvedArg)
                .map((key) => `"${key}" = ${this.resolveArg(context, arg[key])}`)
                .join(", ")}}`;
        }
        return resolvedArg;
    }
    resolveArg(context, arg) {
        const resolvedArg = context.resolve(arg);
        if (typeof arg === "string") {
            const str = this.resolveString(arg, resolvedArg);
            // When Token.asString() is used on an object, str will be the object and needs to be resolved differently
            // This happens for example in MapTerraformIterator#_getForEachExpression and can cause issues like #3540
            if (typeof str !== "string") {
                return this.resolveExpressionPart(context, str);
            }
            return str;
        }
        return this.resolveExpressionPart(context, arg);
    }
    /**
     * Escape string removes characters from the string that are not allowed in Terraform or JSON
     * It must only be used on non-token values
     */
    escapeString(str) {
        return str
            .replace(/\n/g, "\\n") // escape newlines
            .replace(/\${/g, "$$${"); // escape ${ to $${
    }
    resolveString(str, resolvedArg) {
        const tokenList = token_1.Tokenization.reverseString(str);
        const numberOfTokens = tokenList.tokens.length + tokenList.intrinsic.length;
        // String literal
        if (numberOfTokens === 0) {
            return resolvedArg !== `"` &&
                resolvedArg.startsWith('"') &&
                resolvedArg.endsWith('"')
                ? this.escapeString(resolvedArg)
                : `"${this.escapeString(resolvedArg)}"`;
        }
        // Only a token reference
        if (tokenList.literals.length === 0 &&
            tokenList.escapes.length === 0 &&
            numberOfTokens === 1) {
            return resolvedArg;
        }
        // String literal + token reference combination
        const joinResult = tokenList.join({
            join: (left, right) => {
                const leftTokens = token_1.Tokenization.reverse(left);
                const leftTokenList = token_1.Tokenization.reverseString(left);
                const rightTokens = token_1.Tokenization.reverse(right);
                const leftTokenCount = leftTokenList.intrinsic.length + leftTokenList.tokens.length;
                // if left is mixed, needs to be left alone (because it's a result of a previous join iteration)
                let leftValue = left;
                // if left is a string literal, then we need to escape it
                if (leftTokenList.literals.length === 1 && leftTokenCount === 0) {
                    leftValue = this.escapeString(left);
                }
                // if left is only a token, needs to be wrapped as terraform expression
                if (leftTokenList.literals.length === 0 && leftTokenCount === 1) {
                    leftValue = `\${${leftTokens[0]}}`;
                }
                const rightValue = rightTokens.length === 0
                    ? this.escapeString(right)
                    : `\${${rightTokens[0]}}`;
                return `${leftValue}${rightValue}`;
            },
        });
        return joinResult !== `"` &&
            joinResult.startsWith('"') &&
            joinResult.endsWith('"')
            ? joinResult
            : `"${joinResult}"`;
    }
}
// A string that represents an input value to be escaped
// eslint-disable-next-line jsdoc/require-jsdoc
class RawString extends TFExpression {
    constructor(str) {
        super(str);
        this.str = str;
    }
    resolve(context) {
        const qts = context.suppressBraces ? `"` : ``;
        return `${qts}${this.escapeString(this.str).replace(/\"/g, '\\"')}${qts}`; // eslint-disable-line no-useless-escape
    }
    toString() {
        return this.str;
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
function rawString(str) {
    return new RawString(str);
}
// eslint-disable-next-line jsdoc/require-jsdoc
class Reference extends TFExpression {
    constructor(identifier, originStack) {
        super(identifier);
        this.identifier = identifier;
        this.originStack = originStack;
        /**
         * A single reference could be used in multiple stacks,
         * e.g. if we expose the ref directly or as token on the stack.
         * We need to store the identifier for each stack,
         * so that the resolved identifier string matches the stack it's resolved in.
         */
        this.crossStackIdentifier = {};
    }
    resolve(context) {
        // We check for cross stack references on preparation, setting a new identifier
        const resolutionStack = terraform_stack_1.TerraformStack.of(context.scope);
        const stackName = resolutionStack.toString();
        const suppressBraces = context.suppressBraces;
        context.suppressBraces = true;
        if (context.preparing) {
            // Cross stack reference
            if (this.originStack && this.originStack !== resolutionStack) {
                const app = app_1.App.of(this.originStack);
                const csr = app.crossStackReference(this.originStack, resolutionStack, this.identifier);
                this.crossStackIdentifier[stackName] = csr;
            }
        }
        // If this is a cross stack reference we will resolve to a reference within this stack.
        if (this.crossStackIdentifier[stackName]) {
            return suppressBraces
                ? this.crossStackIdentifier[stackName]
                : `\${${this.crossStackIdentifier[stackName]}}`;
        }
        return suppressBraces ? this.identifier : `\${${this.identifier}}`;
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
function ref(identifier, stack) {
    return new Reference(identifier, stack);
}
/**
 * marks the argument as being used in a terraform expression
 * @deprecated
 */
function insideTfExpression(arg) {
    return arg;
}
// eslint-disable-next-line jsdoc/require-jsdoc
class PropertyAccess extends TFExpression {
    constructor(target, args) {
        super({ target, args });
        this.target = target;
        this.args = args;
    }
    resolve(context) {
        const suppressBraces = context.suppressBraces;
        context.suppressBraces = true;
        const serializedArgs = this.args
            .map((arg) => {
            if (arg === `*`) {
                return "[*]";
            }
            const a = this.resolveArg(context, arg);
            const isPlainString = typeof arg === "string" && TERRAFORM_IDENTIFIER_REGEX.test(arg);
            const isPlainNumber = typeof arg === "number" && !token_1.Token.isUnresolved(arg);
            if (isPlainString || isPlainNumber) {
                return `.${arg}`;
            }
            return `[${a}]`;
        }) // property access
            .join("");
        const targetExpr = constructs_1.Construct.isConstruct(this.target) && "fqn" in this.target
            ? this.target.fqn
            : this.resolveArg(context, this.target);
        const expr = `${targetExpr}${serializedArgs}`;
        return suppressBraces ? expr : `\${${expr}}`;
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
function propertyAccess(target, args) {
    return new PropertyAccess(target, args);
}
// eslint-disable-next-line jsdoc/require-jsdoc
class ConditionalExpression extends TFExpression {
    constructor(condition, trueValue, falseValue) {
        super({ condition, trueValue, falseValue });
        this.condition = condition;
        this.trueValue = trueValue;
        this.falseValue = falseValue;
    }
    resolve(context) {
        const suppressBraces = context.suppressBraces;
        context.suppressBraces = true;
        const condition = this.resolveArg(context, this.condition);
        const trueValue = this.resolveArg(context, this.trueValue);
        const falseValue = this.resolveArg(context, this.falseValue);
        const expr = `${condition} ? ${trueValue} : ${falseValue}`;
        return suppressBraces ? expr : `\${${expr}}`;
    }
}
/**
 * creates an expression like `true ? 1 : 0`
 */
function conditional(condition, trueValue, falseValue) {
    return new ConditionalExpression(condition, trueValue, falseValue);
}
/**
 * Base class for Operator Expressions
 * @internal
 */
class OperatorExpression extends TFExpression {
    constructor(operator, left, right) {
        super({ operator, leftValue: left, rightValue: right });
        this.operator = operator;
        this.left = left;
        this.right = right;
    }
    resolve(context) {
        const suppressBraces = context.suppressBraces;
        context.suppressBraces = true;
        const left = this.resolveArg(context, this.left);
        const right = this.right ? this.resolveArg(context, this.right) : undefined;
        let expr = "";
        switch (this.operator) {
            case "!": {
                expr = `!${left}`; // no braces needed as ! has highest precedence
                break;
            }
            case "-": {
                if (right) {
                    // subtraction
                    expr = `(${left} - ${right})`;
                }
                else {
                    // negation
                    expr = `-${left}`; // no braces needed as - has highest precedence
                }
                break;
            }
            default: {
                expr = `(${left} ${this.operator} ${right})`;
            }
        }
        return suppressBraces ? expr : `\${${expr}}`;
    }
}
exports.OperatorExpression = OperatorExpression;
// eslint-disable-next-line jsdoc/require-jsdoc
class FunctionCall extends TFExpression {
    constructor(name, args) {
        super({ name, args });
        this.name = name;
        this.args = args;
    }
    resolve(context) {
        const suppressBraces = context.suppressBraces;
        const originalIgnoreEscapes = context.ignoreEscapes;
        const originalWarnEscapes = context.warnEscapes;
        context.suppressBraces = true;
        context.ignoreEscapes = true;
        context.warnEscapes = true;
        const serializedArgs = this.args
            .map((arg) => this.resolveArg(context, arg))
            .join(", ");
        const expr = `${this.name}(${serializedArgs})`;
        context.ignoreEscapes = originalIgnoreEscapes;
        context.warnEscapes = originalWarnEscapes;
        return suppressBraces ? expr : `\${${expr}}`;
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
function call(name, args) {
    return new FunctionCall(name, args);
}
exports.FOR_EXPRESSION_KEY = ref("key");
exports.FOR_EXPRESSION_VALUE = ref("val");
/**
 * https://developer.hashicorp.com/terraform/language/expressions/for
 */
class ForExpression extends TFExpression {
    constructor(input, valueExpression, keyExpression) {
        super({ input, valueExpression, keyExpression });
        this.input = input;
        this.valueExpression = valueExpression;
        this.keyExpression = keyExpression;
    }
    resolve(context) {
        const suppressBraces = context.suppressBraces;
        context.suppressBraces = true;
        const key = this.resolveArg(context, exports.FOR_EXPRESSION_KEY);
        const value = this.resolveArg(context, exports.FOR_EXPRESSION_VALUE);
        const input = this.resolveArg(context, this.input);
        const valueExpr = this.resolveExpressionPart(context, this.valueExpression);
        let expr;
        if (this.keyExpression) {
            const keyExpr = this.resolveExpressionPart(context, this.keyExpression);
            expr = `{ for ${key}, ${value} in ${input}: ${keyExpr} => ${valueExpr} }`;
        }
        else {
            expr = `[ for ${key}, ${value} in ${input}: ${valueExpr}]`;
        }
        return suppressBraces ? expr : `\${${expr}}`;
    }
}
/**
 * Creates a for expression, used for advanced internal use cases (e.g. in the @cdktf/aws-adapter)
 * It is currently not possible to use this via JSII in other languages. Usually you might want to
 * use TerraformIterator instead.
 *
 * @param input the input for the expression e.g. a list or an object
 * @param valueExpression will express the value e.g. [ for i in &lt;input&gt; : &lt;valueExpression&gt; ]
 * @param keyExpression if set will return an object e.g. { for k,v in &lt;input&gt; : &lt;keyExpression&gt; => &lt;valueExpression&gt;}
 * @returns a for expression
 *
 * The variables for key (for maps) / index (for lists) and value that are valid in the key- and valueExpression
 * can be referenced by using these constants: FOR_EXPRESSION_KEY and FOR_EXPRESSION_VALUE.
 *
 * Currently nesting for expressions is not supported due to this simplification.
 *
 * Currently does not support filtering elements (if clause) or grouping results
 */
function forExpression(input, valueExpression, keyExpression) {
    return new ForExpression(input, valueExpression, keyExpression);
}
// eslint-disable-next-line jsdoc/require-jsdoc
class Dependable extends TFExpression {
    constructor(dependable) {
        super(dependable);
        this.dependable = dependable;
    }
    resolve(context) {
        context.suppressBraces = true;
        return this.dependable.fqn;
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
function dependable(dependable) {
    return token_1.Token.asString(new Dependable(dependable));
}
//# sourceMappingURL=data:application/json;base64,