"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copySync = copySync;
exports.archiveSync = archiveSync;
exports.hashPath = hashPath;
exports.findFileAboveCwd = findFileAboveCwd;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const archiver = require("archiver");
const errors_1 = require("../errors");
const child_process_1 = require("child_process");
const HASH_LEN = 32;
// Full implementation at https://github.com/jprichardson/node-fs-extra/blob/master/lib/copy/copy-sync.js
/**
 * Copy a file or directory. The directory can have contents and subfolders.
 * @param {string} src
 * @param {string} dest
 */
function copySync(src, dest) {
    /**
     * Copies file if present otherwise walks subfolder
     * @param {string} p
     */
    function copyItem(p) {
        const sourcePath = path.resolve(src, p);
        const stat = fs.statSync(sourcePath);
        if (stat.isFile()) {
            fs.copyFileSync(sourcePath, path.resolve(dest, p));
        }
        if (stat.isDirectory()) {
            walkSubfolder(p);
        }
    }
    /**
     * Copies contents of subfolder
     * @param {string} p
     */
    function walkSubfolder(p) {
        const sourceDir = path.resolve(src, p);
        fs.mkdirSync(path.resolve(dest, p), { recursive: true });
        fs.readdirSync(sourceDir).forEach((item) => copyItem(path.join(p, item)));
    }
    walkSubfolder(".");
}
/**
 * Zips contents at src and places zip archive at dest
 * @param {string} src
 * @param {string} dest
 */
function archiveSync(src, dest) {
    // Run this module as a CLI to get around the synchronous limitation
    try {
        (0, child_process_1.execSync)(`node ${__filename} ${src} ${dest}`, { encoding: "utf-8" });
    }
    catch (err) {
        throw (0, errors_1.assetCanNotCreateZipArchive)(src, dest, err);
    }
}
/**
 *
 * @param src
 * @param dest
 */
async function runArchive(src, dest) {
    return new Promise((resolve, reject) => {
        const output = fs.createWriteStream(dest);
        const archive = archiver("zip", {
            zlib: { level: 9 }, // Sets the compression level.
        });
        archive.pipe(output);
        archive.on("error", (err) => {
            reject(err);
        });
        output.on("close", () => {
            resolve();
        });
        archive.directory(src, false);
        archive.finalize();
    });
}
// If this file is executed as a CLI we run archive directly
// It's a bit of a hack due to us being restricted to synchronous functions
// when there is no sync way to create a zip archive.
// We get around this by using execSync and invoking this file as the CLI.
// This only works for one function, but we only have this use-case once.
if (require.main === module) {
    const src = process.argv[2];
    const dest = process.argv[3];
    runArchive(src, dest)
        .then(() => {
        process.exit(0);
    })
        .catch((err) => {
        console.error(err);
        process.exit(1);
    });
}
// eslint-disable-next-line jsdoc/require-jsdoc
function hashPath(src) {
    const hash = crypto.createHash("md5");
    // eslint-disable-next-line jsdoc/require-jsdoc
    function hashRecursion(p) {
        const stat = fs.statSync(p);
        if (stat.isFile()) {
            hash.update(fs.readFileSync(p));
        }
        else if (stat.isDirectory()) {
            fs.readdirSync(p).forEach((filename) => hashRecursion(path.resolve(p, filename)));
        }
    }
    hashRecursion(src);
    return hash.digest("hex").slice(0, HASH_LEN).toUpperCase();
}
// eslint-disable-next-line jsdoc/require-jsdoc
function findFileAboveCwd(file, rootPath = process.cwd()) {
    const fullPath = path.resolve(rootPath, file);
    if (fs.existsSync(fullPath)) {
        return fullPath;
    }
    const parentDir = path.resolve(rootPath, "..");
    if (fs.existsSync(parentDir) && parentDir !== rootPath) {
        return findFileAboveCwd(file, parentDir);
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,