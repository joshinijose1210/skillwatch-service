"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Password = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/random/3.7.2/docs/resources/password random_password}
*/
class Password extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Password resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Password to import
    * @param importFromId The id of the existing Password that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/random/3.7.2/docs/resources/password#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Password to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "random_password", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/random/3.7.2/docs/resources/password random_password} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PasswordConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'random_password',
            terraformGeneratorMetadata: {
                providerName: 'random',
                providerVersion: '3.7.2',
                providerVersionConstraint: '~> 3.1'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._keepers = config.keepers;
        this._length = config.length;
        this._lower = config.lower;
        this._minLower = config.minLower;
        this._minNumeric = config.minNumeric;
        this._minSpecial = config.minSpecial;
        this._minUpper = config.minUpper;
        this._number = config.number;
        this._numeric = config.numeric;
        this._overrideSpecial = config.overrideSpecial;
        this._special = config.special;
        this._upper = config.upper;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // bcrypt_hash - computed: true, optional: false, required: false
    get bcryptHash() {
        return this.getStringAttribute('bcrypt_hash');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get keepers() {
        return this.getStringMapAttribute('keepers');
    }
    set keepers(value) {
        this._keepers = value;
    }
    resetKeepers() {
        this._keepers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keepersInput() {
        return this._keepers;
    }
    get length() {
        return this.getNumberAttribute('length');
    }
    set length(value) {
        this._length = value;
    }
    // Temporarily expose input value. Use with caution.
    get lengthInput() {
        return this._length;
    }
    get lower() {
        return this.getBooleanAttribute('lower');
    }
    set lower(value) {
        this._lower = value;
    }
    resetLower() {
        this._lower = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lowerInput() {
        return this._lower;
    }
    get minLower() {
        return this.getNumberAttribute('min_lower');
    }
    set minLower(value) {
        this._minLower = value;
    }
    resetMinLower() {
        this._minLower = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minLowerInput() {
        return this._minLower;
    }
    get minNumeric() {
        return this.getNumberAttribute('min_numeric');
    }
    set minNumeric(value) {
        this._minNumeric = value;
    }
    resetMinNumeric() {
        this._minNumeric = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNumericInput() {
        return this._minNumeric;
    }
    get minSpecial() {
        return this.getNumberAttribute('min_special');
    }
    set minSpecial(value) {
        this._minSpecial = value;
    }
    resetMinSpecial() {
        this._minSpecial = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minSpecialInput() {
        return this._minSpecial;
    }
    get minUpper() {
        return this.getNumberAttribute('min_upper');
    }
    set minUpper(value) {
        this._minUpper = value;
    }
    resetMinUpper() {
        this._minUpper = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minUpperInput() {
        return this._minUpper;
    }
    get number() {
        return this.getBooleanAttribute('number');
    }
    set number(value) {
        this._number = value;
    }
    resetNumber() {
        this._number = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numberInput() {
        return this._number;
    }
    get numeric() {
        return this.getBooleanAttribute('numeric');
    }
    set numeric(value) {
        this._numeric = value;
    }
    resetNumeric() {
        this._numeric = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numericInput() {
        return this._numeric;
    }
    get overrideSpecial() {
        return this.getStringAttribute('override_special');
    }
    set overrideSpecial(value) {
        this._overrideSpecial = value;
    }
    resetOverrideSpecial() {
        this._overrideSpecial = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get overrideSpecialInput() {
        return this._overrideSpecial;
    }
    // result - computed: true, optional: false, required: false
    get result() {
        return this.getStringAttribute('result');
    }
    get special() {
        return this.getBooleanAttribute('special');
    }
    set special(value) {
        this._special = value;
    }
    resetSpecial() {
        this._special = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specialInput() {
        return this._special;
    }
    get upper() {
        return this.getBooleanAttribute('upper');
    }
    set upper(value) {
        this._upper = value;
    }
    resetUpper() {
        this._upper = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get upperInput() {
        return this._upper;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            keepers: cdktf.hashMapper(cdktf.stringToTerraform)(this._keepers),
            length: cdktf.numberToTerraform(this._length),
            lower: cdktf.booleanToTerraform(this._lower),
            min_lower: cdktf.numberToTerraform(this._minLower),
            min_numeric: cdktf.numberToTerraform(this._minNumeric),
            min_special: cdktf.numberToTerraform(this._minSpecial),
            min_upper: cdktf.numberToTerraform(this._minUpper),
            number: cdktf.booleanToTerraform(this._number),
            numeric: cdktf.booleanToTerraform(this._numeric),
            override_special: cdktf.stringToTerraform(this._overrideSpecial),
            special: cdktf.booleanToTerraform(this._special),
            upper: cdktf.booleanToTerraform(this._upper),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            keepers: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._keepers),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            length: {
                value: cdktf.numberToHclTerraform(this._length),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            lower: {
                value: cdktf.booleanToHclTerraform(this._lower),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            min_lower: {
                value: cdktf.numberToHclTerraform(this._minLower),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            min_numeric: {
                value: cdktf.numberToHclTerraform(this._minNumeric),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            min_special: {
                value: cdktf.numberToHclTerraform(this._minSpecial),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            min_upper: {
                value: cdktf.numberToHclTerraform(this._minUpper),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            number: {
                value: cdktf.booleanToHclTerraform(this._number),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            numeric: {
                value: cdktf.booleanToHclTerraform(this._numeric),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            override_special: {
                value: cdktf.stringToHclTerraform(this._overrideSpecial),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            special: {
                value: cdktf.booleanToHclTerraform(this._special),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            upper: {
                value: cdktf.booleanToHclTerraform(this._upper),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Password = Password;
_a = JSII_RTTI_SYMBOL_1;
Password[_a] = { fqn: "@cdktf/provider-random.password.Password", version: "12.0.0" };
// =================
// STATIC PROPERTIES
// =================
Password.tfResourceType = "random_password";
//# sourceMappingURL=data:application/json;base64,