"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rotating = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/time/0.13.1/docs/resources/rotating time_rotating}
*/
class Rotating extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Rotating resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Rotating to import
    * @param importFromId The id of the existing Rotating that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/time/0.13.1/docs/resources/rotating#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Rotating to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "time_rotating", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/time/0.13.1/docs/resources/rotating time_rotating} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RotatingConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'time_rotating',
            terraformGeneratorMetadata: {
                providerName: 'time',
                providerVersion: '0.13.1',
                providerVersionConstraint: '~> 0.7'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._rfc3339 = config.rfc3339;
        this._rotationDays = config.rotationDays;
        this._rotationHours = config.rotationHours;
        this._rotationMinutes = config.rotationMinutes;
        this._rotationMonths = config.rotationMonths;
        this._rotationRfc3339 = config.rotationRfc3339;
        this._rotationYears = config.rotationYears;
        this._triggers = config.triggers;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // day - computed: true, optional: false, required: false
    get day() {
        return this.getNumberAttribute('day');
    }
    // hour - computed: true, optional: false, required: false
    get hour() {
        return this.getNumberAttribute('hour');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // minute - computed: true, optional: false, required: false
    get minute() {
        return this.getNumberAttribute('minute');
    }
    // month - computed: true, optional: false, required: false
    get month() {
        return this.getNumberAttribute('month');
    }
    get rfc3339() {
        return this.getStringAttribute('rfc3339');
    }
    set rfc3339(value) {
        this._rfc3339 = value;
    }
    resetRfc3339() {
        this._rfc3339 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rfc3339Input() {
        return this._rfc3339;
    }
    get rotationDays() {
        return this.getNumberAttribute('rotation_days');
    }
    set rotationDays(value) {
        this._rotationDays = value;
    }
    resetRotationDays() {
        this._rotationDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rotationDaysInput() {
        return this._rotationDays;
    }
    get rotationHours() {
        return this.getNumberAttribute('rotation_hours');
    }
    set rotationHours(value) {
        this._rotationHours = value;
    }
    resetRotationHours() {
        this._rotationHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rotationHoursInput() {
        return this._rotationHours;
    }
    get rotationMinutes() {
        return this.getNumberAttribute('rotation_minutes');
    }
    set rotationMinutes(value) {
        this._rotationMinutes = value;
    }
    resetRotationMinutes() {
        this._rotationMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rotationMinutesInput() {
        return this._rotationMinutes;
    }
    get rotationMonths() {
        return this.getNumberAttribute('rotation_months');
    }
    set rotationMonths(value) {
        this._rotationMonths = value;
    }
    resetRotationMonths() {
        this._rotationMonths = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rotationMonthsInput() {
        return this._rotationMonths;
    }
    get rotationRfc3339() {
        return this.getStringAttribute('rotation_rfc3339');
    }
    set rotationRfc3339(value) {
        this._rotationRfc3339 = value;
    }
    resetRotationRfc3339() {
        this._rotationRfc3339 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rotationRfc3339Input() {
        return this._rotationRfc3339;
    }
    get rotationYears() {
        return this.getNumberAttribute('rotation_years');
    }
    set rotationYears(value) {
        this._rotationYears = value;
    }
    resetRotationYears() {
        this._rotationYears = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rotationYearsInput() {
        return this._rotationYears;
    }
    // second - computed: true, optional: false, required: false
    get second() {
        return this.getNumberAttribute('second');
    }
    get triggers() {
        return this.getStringMapAttribute('triggers');
    }
    set triggers(value) {
        this._triggers = value;
    }
    resetTriggers() {
        this._triggers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggersInput() {
        return this._triggers;
    }
    // unix - computed: true, optional: false, required: false
    get unix() {
        return this.getNumberAttribute('unix');
    }
    // year - computed: true, optional: false, required: false
    get year() {
        return this.getNumberAttribute('year');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            rfc3339: cdktf.stringToTerraform(this._rfc3339),
            rotation_days: cdktf.numberToTerraform(this._rotationDays),
            rotation_hours: cdktf.numberToTerraform(this._rotationHours),
            rotation_minutes: cdktf.numberToTerraform(this._rotationMinutes),
            rotation_months: cdktf.numberToTerraform(this._rotationMonths),
            rotation_rfc3339: cdktf.stringToTerraform(this._rotationRfc3339),
            rotation_years: cdktf.numberToTerraform(this._rotationYears),
            triggers: cdktf.hashMapper(cdktf.stringToTerraform)(this._triggers),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            rfc3339: {
                value: cdktf.stringToHclTerraform(this._rfc3339),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            rotation_days: {
                value: cdktf.numberToHclTerraform(this._rotationDays),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            rotation_hours: {
                value: cdktf.numberToHclTerraform(this._rotationHours),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            rotation_minutes: {
                value: cdktf.numberToHclTerraform(this._rotationMinutes),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            rotation_months: {
                value: cdktf.numberToHclTerraform(this._rotationMonths),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            rotation_rfc3339: {
                value: cdktf.stringToHclTerraform(this._rotationRfc3339),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            rotation_years: {
                value: cdktf.numberToHclTerraform(this._rotationYears),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            triggers: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._triggers),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Rotating = Rotating;
_a = JSII_RTTI_SYMBOL_1;
Rotating[_a] = { fqn: "@cdktf/provider-time.rotating.Rotating", version: "11.0.0" };
// =================
// STATIC PROPERTIES
// =================
Rotating.tfResourceType = "time_rotating";
//# sourceMappingURL=data:application/json;base64,