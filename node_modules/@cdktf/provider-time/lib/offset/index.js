"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Offset = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/time/0.13.1/docs/resources/offset time_offset}
*/
class Offset extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Offset resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Offset to import
    * @param importFromId The id of the existing Offset that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/time/0.13.1/docs/resources/offset#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Offset to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "time_offset", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/time/0.13.1/docs/resources/offset time_offset} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OffsetConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'time_offset',
            terraformGeneratorMetadata: {
                providerName: 'time',
                providerVersion: '0.13.1',
                providerVersionConstraint: '~> 0.7'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._baseRfc3339 = config.baseRfc3339;
        this._offsetDays = config.offsetDays;
        this._offsetHours = config.offsetHours;
        this._offsetMinutes = config.offsetMinutes;
        this._offsetMonths = config.offsetMonths;
        this._offsetSeconds = config.offsetSeconds;
        this._offsetYears = config.offsetYears;
        this._triggers = config.triggers;
    }
    get baseRfc3339() {
        return this.getStringAttribute('base_rfc3339');
    }
    set baseRfc3339(value) {
        this._baseRfc3339 = value;
    }
    resetBaseRfc3339() {
        this._baseRfc3339 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseRfc3339Input() {
        return this._baseRfc3339;
    }
    // day - computed: true, optional: false, required: false
    get day() {
        return this.getNumberAttribute('day');
    }
    // hour - computed: true, optional: false, required: false
    get hour() {
        return this.getNumberAttribute('hour');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // minute - computed: true, optional: false, required: false
    get minute() {
        return this.getNumberAttribute('minute');
    }
    // month - computed: true, optional: false, required: false
    get month() {
        return this.getNumberAttribute('month');
    }
    get offsetDays() {
        return this.getNumberAttribute('offset_days');
    }
    set offsetDays(value) {
        this._offsetDays = value;
    }
    resetOffsetDays() {
        this._offsetDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offsetDaysInput() {
        return this._offsetDays;
    }
    get offsetHours() {
        return this.getNumberAttribute('offset_hours');
    }
    set offsetHours(value) {
        this._offsetHours = value;
    }
    resetOffsetHours() {
        this._offsetHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offsetHoursInput() {
        return this._offsetHours;
    }
    get offsetMinutes() {
        return this.getNumberAttribute('offset_minutes');
    }
    set offsetMinutes(value) {
        this._offsetMinutes = value;
    }
    resetOffsetMinutes() {
        this._offsetMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offsetMinutesInput() {
        return this._offsetMinutes;
    }
    get offsetMonths() {
        return this.getNumberAttribute('offset_months');
    }
    set offsetMonths(value) {
        this._offsetMonths = value;
    }
    resetOffsetMonths() {
        this._offsetMonths = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offsetMonthsInput() {
        return this._offsetMonths;
    }
    get offsetSeconds() {
        return this.getNumberAttribute('offset_seconds');
    }
    set offsetSeconds(value) {
        this._offsetSeconds = value;
    }
    resetOffsetSeconds() {
        this._offsetSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offsetSecondsInput() {
        return this._offsetSeconds;
    }
    get offsetYears() {
        return this.getNumberAttribute('offset_years');
    }
    set offsetYears(value) {
        this._offsetYears = value;
    }
    resetOffsetYears() {
        this._offsetYears = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get offsetYearsInput() {
        return this._offsetYears;
    }
    // rfc3339 - computed: true, optional: false, required: false
    get rfc3339() {
        return this.getStringAttribute('rfc3339');
    }
    // second - computed: true, optional: false, required: false
    get second() {
        return this.getNumberAttribute('second');
    }
    get triggers() {
        return this.getStringMapAttribute('triggers');
    }
    set triggers(value) {
        this._triggers = value;
    }
    resetTriggers() {
        this._triggers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggersInput() {
        return this._triggers;
    }
    // unix - computed: true, optional: false, required: false
    get unix() {
        return this.getNumberAttribute('unix');
    }
    // year - computed: true, optional: false, required: false
    get year() {
        return this.getNumberAttribute('year');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            base_rfc3339: cdktf.stringToTerraform(this._baseRfc3339),
            offset_days: cdktf.numberToTerraform(this._offsetDays),
            offset_hours: cdktf.numberToTerraform(this._offsetHours),
            offset_minutes: cdktf.numberToTerraform(this._offsetMinutes),
            offset_months: cdktf.numberToTerraform(this._offsetMonths),
            offset_seconds: cdktf.numberToTerraform(this._offsetSeconds),
            offset_years: cdktf.numberToTerraform(this._offsetYears),
            triggers: cdktf.hashMapper(cdktf.stringToTerraform)(this._triggers),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            base_rfc3339: {
                value: cdktf.stringToHclTerraform(this._baseRfc3339),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            offset_days: {
                value: cdktf.numberToHclTerraform(this._offsetDays),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            offset_hours: {
                value: cdktf.numberToHclTerraform(this._offsetHours),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            offset_minutes: {
                value: cdktf.numberToHclTerraform(this._offsetMinutes),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            offset_months: {
                value: cdktf.numberToHclTerraform(this._offsetMonths),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            offset_seconds: {
                value: cdktf.numberToHclTerraform(this._offsetSeconds),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            offset_years: {
                value: cdktf.numberToHclTerraform(this._offsetYears),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            triggers: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._triggers),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Offset = Offset;
_a = JSII_RTTI_SYMBOL_1;
Offset[_a] = { fqn: "@cdktf/provider-time.offset.Offset", version: "11.0.0" };
// =================
// STATIC PROPERTIES
// =================
Offset.tfResourceType = "time_offset";
//# sourceMappingURL=data:application/json;base64,